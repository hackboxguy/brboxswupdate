#!/bin/sh
SHOW_BOOT_SYSTEM=0
SHOW_BOOT_VERSION=0
FLIP_BOOT_MARKER=0
SHOW_BOARD_TYPE=0
GRUBCFG_FILE_PATH=/boot/grub/grub.cfg
VERSION_FILE_PATH=/etc/version-num.txt
#UUID_FILE_PATH=/boot/brbox-uuid.txt
SHOW_BKBOOT_VERSION=0
BOOT_BRBOX_PART=mmcblk0p1 #raspi boot partition
ONE_BRBOX_NAME=brbox1 #name of the first brbox system
TWO_BRBOX_NAME=brbox2 #name of the second brbox system
ONE_BRBOX_PART=mmcblk0p2 #sda2 #partition
TWO_BRBOX_PART=mmcblk0p3 #sda3 #partition

RP_CMDLINE_FILE=cmdline.txt
RP_CONFIG_FILE=config.txt
RP_KERNEL1=zImage
RP_KERNEL2=zImage2

BOARD_TYPE_BTR="baytrail"
BOARD_TYPE_RP1="raspi1"
BOARD_TYPE_RP2="raspi2"
BOARD_TYPE_BBB="bbb"
BOARD_TYPE_WDB="wandboard"
CPU_TYPE_RP1="0xb76"
CPU_TYPE_RP2="0xc07"

#USAGE="script for generating single niro binary from multiple niro fmw"
USAGE="usage:$0 -c[show_current_booted_system   ] -v[show_version_of_current_system]"
USAGE1="usage:$0 -b[show_version_of_other_system] -f[flip_boot_marker_flag]"
###############################################################
MountDevice() #1=/dev/node retur-val=folderpath of mounted system
{
	TEMP_MOUNT_POINT=$(mktemp -d)
	if [ $? != "0" ]; then #unable to create temp mount directory
		return 1
	fi
	mount $1 $TEMP_MOUNT_POINT
	if [ $? != "0" ]; then #unable mount device, filesystem might be fresh or corrupt
		return 1
	fi
	echo $TEMP_MOUNT_POINT
}
###############################################################
ReadBoardType()
{
	RESULT=$(cat /proc/cpuinfo | grep "CPU part" )
	if [ $? != "0" ]; then
		echo "unknown"
		return 1
	fi
	RESULT=$(echo $RESULT | head -n1 | awk '{print $4}'  )
	if [ $? != "0" ]; then
		echo "unknown"
		return 1
	fi

	[ "$RESULT" = "$CPU_TYPE_RP1" ]  && { echo $BOARD_TYPE_RP1; return 0; }
	[ "$RESULT" = "$CPU_TYPE_RP2" ]  && { echo $BOARD_TYPE_RP2; return 0; }
	#TODO: add here remaining types
	echo "unknown"
	return 1
}
###############################################################
ReadBootSystem()
{
	RESULT=$(cat /proc/cmdline | grep "root=" )
	if [ $? != "0" ]; then
		return 1
	fi
	RESULT=$(echo $RESULT | grep -o "root=.*" | awk '{print $1}' | sed 's/root=.dev.//')
	[ "$RESULT" =  "$ONE_BRBOX_PART" ] && echo $ONE_BRBOX_NAME && return 0
	[ "$RESULT" =  "$TWO_BRBOX_PART" ] && echo $TWO_BRBOX_NAME && return 0
	echo "unknown" #$RESULT
	return 1
}
ReadBootMarker()  #$/boot/cmdline.txt file
{
	#mount boot partition
#	MOUNT_DIR=$(MountDevice /dev/$BOOT_BRBOX_PART)
#	if [ $? != "0" ]; then #unable mount second system, filesystem might be fresh or corrupt
#		return 1
#	fi
	RESULT=$(cat $1 | grep -o "root=.*" | awk '{print $1}' | sed 's/root=.dev.//')
	if [ $? != "0" ]; then
		#umount /dev/$BOOT_BRBOX_PART
		#sync
		#rm -r $MOUNT_DIR
		return 1
	fi
	#umount /dev/$BOOT_BRBOX_PART
	#sync
	#rm -r $MOUNT_DIR
	[ "$RESULT" =  "$ONE_BRBOX_PART" ] && echo $ONE_BRBOX_NAME && return 0
	[ "$RESULT" =  "$TWO_BRBOX_PART" ] && echo $TWO_BRBOX_NAME && return 0
	echo "unknown" #$RESULT
	return 1
}
WriteBootMarker() #$1=path_of_cmdline.txt $2-partition-number $3=config.txt $4
{
	sed -i "s|root=/dev/mmcblk0p.|root=/dev/$2|" $1   #specify root path in cmdline.txt(kernel args)
	sed -i "s|kernel=.*|kernel=$4|" $3                #specify kernle file name in config.txt
	return 0
}
ReadBootVersion() #$1=filepath
{
	if [ ! -f  "$1"  ];then
		return 1
	fi
	RESULT=$(cat $1 )
	if [ $? != "0" ]; then
		return 1
	fi
	echo $RESULT
	return 0
}
ReadBkBootVersion()
{
	RESULT=0
	CUR_BOOT=$(ReadBootSystem)
	if [ $? != "0" ]; then #unable to read current boot system
		return 1
	fi
	if [ "$CUR_BOOT" = "$ONE_BRBOX_NAME" ]; then
		MOUNT_DIR=$(MountDevice /dev/$TWO_BRBOX_PART)
		if [ $? != "0" ]; then #unable mount second system, filesystem might be fresh or corrupt
			return 1
		fi
		BOOT_VER=$(ReadBootVersion $MOUNT_DIR/$VERSION_FILE_PATH)
		if [ $? != "0" ]; then #unable to read version
			RESULT=1
		else
			echo $BOOT_VER
		fi
		umount /dev/$TWO_BRBOX_PART
		sync
		rm -r $MOUNT_DIR
		return $RESULT
	elif [ "$CUR_BOOT" = "$TWO_BRBOX_NAME" ]; then
		MOUNT_DIR=$(MountDevice /dev/$ONE_BRBOX_PART)
		if [ $? != "0" ]; then #unable mount first system, filesystem might be fresh or corrupt
			return 1
		fi
		BOOT_VER=$(ReadBootVersion $MOUNT_DIR/$VERSION_FILE_PATH)
		if [ $? != "0" ]; then #unable to read version
			RESULT=1
		else
			echo $BOOT_VER
		fi
		umount /dev/$ONE_BRBOX_PART
		sync
		rm -r $MOUNT_DIR
		return $RESULT
	else
		return 1
	fi
}
FlipBootMarker()
{
	RESULT=0	
	CUR_BOOT=$(ReadBootSystem)
	if [ $? != "0" ]; then #unable to read current boot system
		return 1
	fi


	MOUNT_DIR=$(MountDevice /dev/$BOOT_BRBOX_PART)
	if [ $? != "0" ]; then #unable mount boot partition, filesystem might be fresh or corrupt
		return 1
	fi

	BOOT_MARKER=$(ReadBootMarker $MOUNT_DIR/$RP_CMDLINE_FILE)
	if [ $? != "0" ]; then #unable to read boot marker
		umount /dev/$BOOT_BRBOX_PART;sync;rm -r $MOUNT_DIR
		return 1
	fi

	if [ "$BOOT_MARKER" != "$CUR_BOOT" ]; then
		umount /dev/$BOOT_BRBOX_PART;sync;rm -r $MOUNT_DIR
		return 0 #already boot-marker is flipped,no action needed, just reboot the display
	fi

	#raspi3-64: there is no zImage, instead there is just "Image" file: note: as of 02.19 rpi-3 image is zImage
	RESULT=$(cat /tmp/BrBoxDevType.txt)
	if [ $RESULT = "RASPI_3" ]; then
		RP_KERNEL1=zImage
		RP_KERNEL2=zImage2
	fi

	#if 1, then flip to 2
	if [ "$BOOT_MARKER" = "$ONE_BRBOX_NAME" ]; then
		WriteBootMarker $MOUNT_DIR/$RP_CMDLINE_FILE $TWO_BRBOX_PART $MOUNT_DIR/$RP_CONFIG_FILE $RP_KERNEL2
		RESULT=$?
		sync
		umount /dev/$BOOT_BRBOX_PART;sync;rm -r $MOUNT_DIR
		return $RESULT
	fi	

	#if 2, then flip to 1
	if [ "$BOOT_MARKER" = "$TWO_BRBOX_NAME" ]; then
		WriteBootMarker $MOUNT_DIR/$RP_CMDLINE_FILE $ONE_BRBOX_PART $MOUNT_DIR/$RP_CONFIG_FILE $RP_KERNEL1
		RESULT=$?
		sync
		umount /dev/$BOOT_BRBOX_PART;sync;rm -r $MOUNT_DIR
		return $RESULT
	fi	

	umount /dev/$BOOT_BRBOX_PART;sync;rm -r $MOUNT_DIR
	#else return non-success
	return 1
}
###############################################################
if [ $# -lt 1  ]; then 
	echo $USAGE
	echo $USAGE1
	exit 1
fi
while getopts cvfbt f
do
    case $f in
	c) SHOW_BOOT_SYSTEM=1 ;;    #current: show which system is currently booted
	v) SHOW_BOOT_VERSION=1;;    #version: show the version of the current system
	f) FLIP_BOOT_MARKER=1 ;;    #flip   : flip the boot marker flag so that next reboot boots other system
	b) SHOW_BKBOOT_VERSION=1;;  #bkup   : show the version of the alternate system
	t) SHOW_BOARD_TYPE=1;;  #type   : show the board type
    esac
done

#execute one of the commands in the given sequence
[ $SHOW_BOOT_SYSTEM = 1    ] && { ReadBootSystem; return $?; }
[ $SHOW_BOOT_VERSION = 1   ] && { ReadBootVersion $VERSION_FILE_PATH; return $?; }
[ $SHOW_BKBOOT_VERSION = 1 ] && { ReadBkBootVersion; return $?; }
[ $FLIP_BOOT_MARKER = 1    ] && { FlipBootMarker; return $?; }
[ $SHOW_BOARD_TYPE = 1     ] && { ReadBoardType; return $?; }

